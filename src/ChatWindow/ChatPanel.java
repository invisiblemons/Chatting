package ChatWindow;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import clients.ClientChatter;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTextPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/**
 *
 * @author MONS
 */
public class ChatPanel extends javax.swing.JPanel {

    DataOutputStream os;
    String sender;
    String receiver;
    Document doc;
    JFileChooser fc;
    boolean chk = true;
    boolean edit = false;
    String textFile;
    File file;

    /**
     * Creates new form ChatPanel
     */
    public ChatPanel(DataOutputStream os, String sender, String receiver) {
        initComponents();

        this.os = os;
        this.sender = sender;
        this.receiver = receiver;

    }

    public JTextPane getTxtMessages() {
        return txtMessages;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMessage = new javax.swing.JPanel();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextPane();
        btnChooseFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextPane();

        panelMessage.setBorder(javax.swing.BorderFactory.createTitledBorder("Message"));

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(txtMessage);

        btnChooseFile.setText("Choose File");
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMessageLayout = new javax.swing.GroupLayout(panelMessage);
        panelMessage.setLayout(panelMessageLayout);
        panelMessageLayout.setHorizontalGroup(
            panelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMessageLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseFile)))
        );
        panelMessageLayout.setVerticalGroup(
            panelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMessageLayout.createSequentialGroup()
                .addGap(0, 3, Short.MAX_VALUE)
                .addGroup(panelMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelMessageLayout.createSequentialGroup()
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jScrollPane2.setViewportView(txtMessages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(panelMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (txtMessage.getText().trim().length() == 0) {
            return;
        }
        if (edit) {
            FileInputStream fileInputStream = null;
            try {
                fileInputStream = new FileInputStream(file);

                int size = fileInputStream.available();
                byte[] b = new byte[size];

                os.writeBytes(sender + "==>" + receiver + "!" + file.getName() + "@" + String.valueOf(file.length()) + "\n");

                while (true) {

                    int read = fileInputStream.read(b);

                    if (read == -1) {
                        break;
                    }

                    os.write(b, 0, read);
                }
                os.write(13);
                os.flush();
                fileInputStream.close();
                Document doc = txtMessages.getDocument();
                doc.insertString(doc.getLength(), "\n" + sender + ": " + file.getName() + " Size: " + String.valueOf(file.length()), null);
                edit = false;
                txtMessage.setEditable(true);
                txtMessage.setText("");
            } catch (Exception e) {
            }
        } else {
            try {
                os.writeBytes(sender + "==>" + receiver + "-" + txtMessage.getText());
                os.write(13);
                os.write(10);
                os.flush();

                int loop = 0;
                String msg = txtMessage.getText();
                String head, tail;

                if ((!msg.matches(".*:[\\)].*")) && (!msg.matches(".*:[\\(].*")) && (!msg.matches(".*=[\\)].*"))) {

                    Document doc = txtMessages.getDocument();
                    doc.insertString(doc.getLength(), "\n" + sender + ": " + msg, null);

                } else {
                    while (chk) {
                        if (msg.matches(".*:[\\)].*")) {
                            ImageIcon smileIcon = createImageIcon("images/smile.jpg", "Smile");
                            if (msg.matches(":[\\)].*")) {
                                head = "";
                            } else {
                                head = msg.split(":[\\)]")[0];
                            }
                            if (msg.matches(".*:[\\)][ ]*") && msg.split(":[\\)]").length == 2 && (!msg.matches(".*:[\\)].*:[\\)]"))) {
                                tail = "";
                            } else {
                                tail = msg.split(":[\\)]", 2)[1];
                            }

                            if (loop == 0) {

                                Document doc = txtMessages.getDocument();
                                doc.insertString(doc.getLength(), "\n" + sender + ": " + head, null);

                                StyledDocument sdoc = txtMessages.getStyledDocument();

                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                Style s = sdoc.addStyle("icon", def);
                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                StyleConstants.setIcon(s, smileIcon);
                                sdoc.insertString(sdoc.getLength(), " ", sdoc.getStyle("icon"));

                            } else if (loop > 0) {

                                Document docc = txtMessages.getDocument();
                                docc.insertString(docc.getLength(), head, null);

                                StyledDocument sdocc = txtMessages.getStyledDocument();

                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                Style s = sdocc.addStyle("icon", def);
                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                StyleConstants.setIcon(s, smileIcon);
                                sdocc.insertString(sdocc.getLength(), " ", sdocc.getStyle("icon"));

                            }
                            if (tail.matches(".*:[\\)].*") || tail.matches(".*:[\\(].*") || tail.matches(".*=[\\)].*")) {
                                chk = true;

                                loop++;
                            } else {
                                chk = false;
                            }
                            msg = tail;
                        } else {
                            chk = false;
                        }
                    }
                    chk = true;

                    while (chk) {
                        if (msg.matches(".*:[\\(].*")) {
                            ImageIcon sadIcon = createImageIcon("images/sad.jpg", "Sad");
                            if (msg.matches(":[\\(].*")) {
                                head = "";
                            } else {
                                head = msg.split(":[\\(]")[0];
                            }
                            if (msg.matches(".*:[\\(][ ]*") && msg.split(":[\\(]").length == 2 && (!msg.matches(".*:[\\(].*:[\\(]"))) {
                                tail = "";
                            } else {
                                tail = msg.split(":[\\(]", 2)[1];
                            }

                            if (loop == 0) {

                                Document doc = txtMessages.getDocument();
                                doc.insertString(doc.getLength(), "\n" + sender + ": " + head, null);

                                StyledDocument sdoc = txtMessages.getStyledDocument();

                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                Style s = sdoc.addStyle("icon", def);
                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                StyleConstants.setIcon(s, sadIcon);
                                sdoc.insertString(sdoc.getLength(), " ", sdoc.getStyle("icon"));

                            } else if (loop > 0) {

                                Document docc = txtMessages.getDocument();
                                docc.insertString(docc.getLength(), head, null);

                                StyledDocument sdocc = txtMessages.getStyledDocument();

                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                Style s = sdocc.addStyle("icon", def);
                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                StyleConstants.setIcon(s, sadIcon);
                                sdocc.insertString(sdocc.getLength(), " ", sdocc.getStyle("icon"));

                            }
                            if (tail.matches(".*:[\\)].*") || tail.matches(".*:[\\(].*") || tail.matches(".*=[\\)].*")) {
                                chk = true;

                                loop++;
                            } else {
                                chk = false;
                            }
                            msg = tail;
                        } else {
                            chk = false;
                        }
                    }
                    chk = true;
                    while (chk) {
                        if (msg.matches(".*=[\\)].*")) {
                            ImageIcon funIcon = createImageIcon("images/joy.jpg", "Fun");
                            if (msg.matches("=[\\)].*")) {
                                head = "";
                            } else {
                                head = msg.split("=[\\)]")[0];
                            }
                            if (msg.matches(".*=[\\)][ ]*") && msg.split("=[\\)]").length == 2 && (!msg.matches(".*=[\\)].*=[\\)]"))) {
                                tail = "";
                            } else {
                                tail = msg.split("=[\\)]", 2)[1];
                            }

                            if (loop == 0) {

                                Document doc = txtMessages.getDocument();
                                doc.insertString(doc.getLength(), "\n" + sender + ": " + head, null);

                                StyledDocument sdoc = txtMessages.getStyledDocument();

                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                Style s = sdoc.addStyle("icon", def);
                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                StyleConstants.setIcon(s, funIcon);
                                sdoc.insertString(sdoc.getLength(), " ", sdoc.getStyle("icon"));

                            } else if (loop > 0) {

                                Document docc = txtMessages.getDocument();
                                docc.insertString(docc.getLength(), head, null);

                                StyledDocument sdocc = txtMessages.getStyledDocument();

                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                Style s = sdocc.addStyle("icon", def);
                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                StyleConstants.setIcon(s, funIcon);
                                sdocc.insertString(sdocc.getLength(), " ", sdocc.getStyle("icon"));

                            }
                            if (tail.matches(".*:[\\)].*") || tail.matches(".*:[\\(].*") || tail.matches(".*=[\\)].*")) {
                                chk = true;

                                loop++;
                            } else {
                                chk = false;
                            }
                            msg = tail;
                        } else {
                            chk = false;
                        }
                        Document doc = txtMessages.getDocument();
                        doc.insertString(doc.getLength(), msg, null);
                    }
                }

                chk = true;

                txtMessage.setText("");

            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        if (fc == null) {
            fc = new JFileChooser();

            //Add a custom file filter and disable the default
            //(Accept All) file filter.
            fc.addChoosableFileFilter(new txtFilter());
            fc.setAcceptAllFileFilterUsed(false);
        }
        //Show it.
        int returnVal = fc.showDialog(ChatPanel.this, "OPEN");
        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            file = fc.getSelectedFile();

            txtMessage.removeAll();
            Document doc = txtMessage.getDocument();
            try {
                doc.insertString(doc.getLength(), file.getName() + ", Size: " + file.length(), null);
            } catch (BadLocationException ex) {
            }
            txtMessage.setEditable(false);
            //Reset the file chooser for the next time it's shown.
            fc.setSelectedFile(null);
            edit = true;

        }
    }//GEN-LAST:event_btnChooseFileActionPerformed

    protected static ImageIcon createImageIcon(String path, String description) {
        java.net.URL imgURL = ClientChatter.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.out.println("Couldn't find file: " + path);
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelMessage;
    private javax.swing.JTextPane txtMessage;
    private javax.swing.JTextPane txtMessages;
    // End of variables declaration//GEN-END:variables
}
