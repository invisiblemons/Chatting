package clients;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import ChatWindow.ChatPanel;
import java.awt.BorderLayout;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.Document;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/**
 *
 * @author MONS
 */
public class ClientChatter extends javax.swing.JFrame implements Runnable {

    Socket mngSocket = null;
    String mngIP = "";
    int mngPort = 0;
    String staffName = "";
    BufferedReader in = null;
    DataInputStream inputStream = null;
    DataOutputStream os = null;

    //receive clients
    BufferedReader brr;
    Socket rSocket;
    //output clients
    Socket oSocket;
    BufferedReader brro;
    //add tabs auto
    Thread th;
    Vector<String> tabs = new Vector<>();

    boolean chk = true;

    /**
     * Creates new form ClientChatter
     */
    public ClientChatter() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtStaff = new javax.swing.JTextField();
        J = new javax.swing.JLabel();
        txtServerIP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Staff and Server Info"));

        jLabel1.setText("Staff:");

        J.setText("Mng IP:");

        jLabel3.setText("Port:");

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(J)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(btnConnect)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(J, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtServerPort)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(btnConnect))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        mngIP = txtServerIP.getText();
        mngPort = Integer.parseInt(txtServerPort.getText());
        staffName = txtStaff.getText();
        //
        try {
            mngSocket = new Socket(mngIP, mngPort);
            //create chat component and add it to the GUI
            if (mngSocket != null) {
                in = new BufferedReader(new InputStreamReader(mngSocket.getInputStream()));
                inputStream = new DataInputStream(mngSocket.getInputStream());
                os = new DataOutputStream(mngSocket.getOutputStream());

                os.writeBytes("Staff:" + staffName);
                os.write(13);
                os.write(10);
                os.flush();

                th = new Thread(this);
                th.start();

                btnConnect.setVisible(false);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Manager is not running");
            System.exit(0);
        }


    }//GEN-LAST:event_btnConnectActionPerformed

    @Override
    public void run() {
        while (true) {
            try {
                if (mngSocket != null) {

                    while (in.ready()) {
                        String text = in.readLine();
                        if (text.matches("@@.+")) {
                            String name = text.split("@@")[1];
                            if ((!name.equals(staffName)) && (!tabs.contains(name))) {
                                ChatPanel chatWindow = new ChatPanel(os, staffName, name);
                                jTabbedPane1.add(name, chatWindow);
                                jPanel3.add(jTabbedPane1, BorderLayout.PAGE_END);
                                chatWindow.updateUI();
                                tabs.add(name);
                            }
                        } else if (text.matches(".+@!@.+")) {
                            int loop = 0;
                            String sender = text.split("@!@")[0];
                            String msg = text.split("@!@")[1];
                            String head, tail;

                            if ((!msg.matches(".*:[\\)].*")) && (!msg.matches(".*:[\\(].*")) && (!msg.matches(".*=[\\)].*"))) {
                                for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                    if (sender.equals(jTabbedPane1.getTitleAt(i))) {
                                        Document doc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                        doc.insertString(doc.getLength(), "\n" + sender + ": " + msg, null);
                                    }
                                }
                                break;
                            }
                            while (chk) {
                                if (msg.matches(".*:[\\)].*")) {
                                    System.out.println("aaaa");
                                    ImageIcon smileIcon = createImageIcon("images/smile.jpg", "Smile");
                                    if (msg.matches(":[\\)].*")) {
                                        head = "";
                                    } else {
                                        head = msg.split(":[\\)]")[0];
                                    }
                                    if (msg.matches(".*:[\\)][ ]*") && msg.split(":[\\)]").length == 2 && (!msg.matches(".*:[\\)].*:[\\)]"))) {
                                        tail = "";
                                    } else {
                                        tail = msg.split(":[\\)]", 2)[1];
                                    }

                                    if (loop == 0) {
                                        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                            if (sender.equals(jTabbedPane1.getTitleAt(i))) {

                                                Document doc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                                doc.insertString(doc.getLength(), "\n" + sender + ": " + head, null);

                                                StyledDocument sdoc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getStyledDocument();

                                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                                Style s = sdoc.addStyle("icon", def);
                                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                                StyleConstants.setIcon(s, smileIcon);
                                                sdoc.insertString(sdoc.getLength(), " ", sdoc.getStyle("icon"));
                                            }
                                        }
                                    } else if (loop > 0) {
                                        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                            if (sender.equals(jTabbedPane1.getTitleAt(i))) {

                                                Document docc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                                docc.insertString(docc.getLength(), head, null);

                                                StyledDocument sdocc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getStyledDocument();

                                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                                Style s = sdocc.addStyle("icon", def);
                                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                                StyleConstants.setIcon(s, smileIcon);
                                                sdocc.insertString(sdocc.getLength(), " ", sdocc.getStyle("icon"));
                                            }
                                        }
                                    }
                                    if (tail.matches(".*:[\\)].*") || tail.matches(".*:[\\(].*") || tail.matches(".*=[\\)].*")) {
                                        chk = true;

                                        loop++;
                                    } else {
                                        chk = false;
                                    }
                                    msg = tail;
                                } else {
                                    chk = false;
                                }
                            }
                            chk = true;

                            while (chk) {
                                if (msg.matches(".*:[\\(].*")) {
                                    System.out.println("aaaa");
                                    ImageIcon sadIcon = createImageIcon("images/sad.jpg", "Sad");
                                    if (msg.matches(":[\\(].*")) {
                                        head = "";
                                    } else {
                                        head = msg.split(":[\\(]")[0];
                                    }
                                    if (msg.matches(".*:[\\(][ ]*") && msg.split(":[\\(]").length == 2 && (!msg.matches(".*:[\\(].*:[\\(]"))) {
                                        tail = "";
                                    } else {
                                        tail = msg.split(":[\\(]", 2)[1];
                                    }

                                    if (loop == 0) {
                                        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                            if (sender.equals(jTabbedPane1.getTitleAt(i))) {

                                                Document doc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                                doc.insertString(doc.getLength(), "\n" + sender + ": " + head, null);

                                                StyledDocument sdoc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getStyledDocument();

                                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                                Style s = sdoc.addStyle("icon", def);
                                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                                StyleConstants.setIcon(s, sadIcon);
                                                sdoc.insertString(sdoc.getLength(), " ", sdoc.getStyle("icon"));
                                            }
                                        }
                                    } else if (loop > 0) {
                                        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                            if (sender.equals(jTabbedPane1.getTitleAt(i))) {

                                                Document docc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                                docc.insertString(docc.getLength(), head, null);

                                                StyledDocument sdocc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getStyledDocument();

                                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                                Style s = sdocc.addStyle("icon", def);
                                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                                StyleConstants.setIcon(s, sadIcon);
                                                sdocc.insertString(sdocc.getLength(), " ", sdocc.getStyle("icon"));
                                            }
                                        }
                                    }
                                    if (tail.matches(".*:[\\)].*") || tail.matches(".*:[\\(].*") || tail.matches(".*=[\\)].*")) {
                                        chk = true;

                                        loop++;
                                    } else {
                                        chk = false;
                                    }
                                    msg = tail;
                                } else {
                                    chk = false;
                                }
                            }
                            chk = true;
                            while (chk) {
                                if (msg.matches(".*=[\\)].*")) {
                                    ImageIcon funIcon = createImageIcon("images/joy.jpg", "Fun");
                                    if (msg.matches("=[\\)].*")) {
                                        head = "";
                                    } else {
                                        head = msg.split("=[\\)]")[0];
                                    }
                                    if (msg.matches(".*=[\\)][ ]*") && msg.split("=[\\)]").length == 2 && (!msg.matches(".*=[\\)].*=[\\)]"))) {
                                        tail = "";
                                    } else {
                                        tail = msg.split("=[\\)]", 2)[1];
                                    }

                                    if (loop == 0) {
                                        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                            if (sender.equals(jTabbedPane1.getTitleAt(i))) {

                                                Document doc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                                doc.insertString(doc.getLength(), "\n" + sender + ": " + head, null);

                                                StyledDocument sdoc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getStyledDocument();

                                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                                Style s = sdoc.addStyle("icon", def);
                                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                                StyleConstants.setIcon(s, funIcon);
                                                sdoc.insertString(sdoc.getLength(), " ", sdoc.getStyle("icon"));
                                            }
                                        }
                                    } else if (loop > 0) {
                                        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                            if (sender.equals(jTabbedPane1.getTitleAt(i))) {

                                                Document docc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                                docc.insertString(docc.getLength(), head, null);

                                                StyledDocument sdocc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getStyledDocument();

                                                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                                                Style s = sdocc.addStyle("icon", def);
                                                StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);

                                                StyleConstants.setIcon(s, funIcon);
                                                sdocc.insertString(sdocc.getLength(), " ", sdocc.getStyle("icon"));
                                            }
                                        }
                                    }
                                    if (tail.matches(".*:[\\)].*") || tail.matches(".*:[\\(].*") || tail.matches(".*=[\\)].*")) {
                                        chk = true;

                                        loop++;
                                    } else {
                                        chk = false;
                                    }
                                    msg = tail;
                                } else {
                                    chk = false;
                                }
                            }

                            for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                if (sender.equals(jTabbedPane1.getTitleAt(i))) {
                                    Document doc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                    doc.insertString(doc.getLength(), msg, null);

                                }
                                chk = true;
                            }
                        } else if (text.matches(".+@##@.+")) {
                            String sender = text.split("@##@")[0];
                            String msg = text.split("@##@")[1];
                            String name = msg.split("@")[0];
                            String size = msg.split("@")[1];

                            int reply = JOptionPane.showConfirmDialog(null, "Has new file! do you wanna get it ?", "File txt", JOptionPane.YES_NO_OPTION);
                            if (reply == JOptionPane.YES_OPTION) {

                                JFileChooser fc = new JFileChooser();
                                fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                                int returnVal = fc.showOpenDialog(ClientChatter.this);
                                if (returnVal == JFileChooser.APPROVE_OPTION) {

                                    byte[] b = new byte[Integer.parseInt(size)];
                                    StringBuffer saveFile = new StringBuffer(fc.getSelectedFile().getAbsolutePath() + "\\");
                                    saveFile.append(name);
                                    File n = new File(saveFile.toString());
                                    FileWriter file = new FileWriter(n);
                                    BufferedWriter bw = new BufferedWriter(file);
                                    while(in.ready())
                                    {
                                        String ff = in.readLine();
                                        if(!ff.matches("@@.*"))
                                        {
                                            bw.write(ff);
                                            bw.write("\n");
                                        }
                                    }
                                    bw.close();
                                    for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                        if (sender.equals(jTabbedPane1.getTitleAt(i))) {
                                            Document doc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                            doc.insertString(doc.getLength(), "\n" + name + ",Size: " + size, null);
                                        }
                                    }
                                } else {
                                    for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                                        if (sender.equals(jTabbedPane1.getTitleAt(i))) {
                                            Document doc = ((ChatPanel) (jTabbedPane1.getComponentAt(i))).getTxtMessages().getDocument();
                                            doc.insertString(doc.getLength(), "\ndeny to receive file", null);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Thread.sleep(500);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    protected static ImageIcon createImageIcon(String path, String description) {
        java.net.URL imgURL = ClientChatter.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.out.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientChatter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel J;
    private javax.swing.JButton btnConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtServerIP;
    private javax.swing.JTextField txtServerPort;
    private javax.swing.JTextField txtStaff;
    // End of variables declaration//GEN-END:variables

}
